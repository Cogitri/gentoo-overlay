diff --git src/NvTriStrip/NvTriStrip.cpp src/NvTriStrip/NvTriStrip.cpp
index 04e50ad..ee448e6 100644
--- src/NvTriStrip/NvTriStrip.cpp
+++ src/NvTriStrip/NvTriStrip.cpp
@@ -85,9 +85,9 @@ void SetMinStripSize(const unsigned int _minStripSize)
 void Cleanup(NvStripInfoVec& tempStrips, NvFaceInfoVec& tempFaces)
 {
 	//delete strips
-	for(int i = 0; i < tempStrips.size(); i++)
+	for(unsigned int i = 0; i < tempStrips.size(); i++)
 	{
-		for(int j = 0; j < tempStrips[i]->m_faces.size(); j++)
+		for(unsigned int j = 0; j < tempStrips[i]->m_faces.size(); j++)
 		{
 			delete tempStrips[i]->m_faces[j];
 			tempStrips[i]->m_faces[j] = NULL;
@@ -98,7 +98,7 @@ void Cleanup(NvStripInfoVec& tempStrips, NvFaceInfoVec& tempFaces)
 	}
 
 	//delete faces
-	for(i = 0; i < tempFaces.size(); i++)
+	for(unsigned int i = 0; i < tempFaces.size(); i++)
 	{
 		delete tempFaces[i];
 		tempFaces[i] = NULL;
@@ -151,7 +151,7 @@ bool TestTriangle(const unsigned short v0, const unsigned short v1, const unsign
 	//hash this triangle
 	bool isLegit = false;
 	int ctr = v0 % NUMBINS;
-	for (int k = 0; k < in_bins[ctr].size(); ++k)
+	for (unsigned int k = 0; k < in_bins[ctr].size(); ++k)
 	{
 		//check triangles in this bin
 		if (SameTriangle(in_bins[ctr][k].m_v0, in_bins[ctr][k].m_v1, in_bins[ctr][k].m_v2, 
@@ -164,7 +164,7 @@ bool TestTriangle(const unsigned short v0, const unsigned short v1, const unsign
 	if (!isLegit)
 	{
 		ctr = v1 % NUMBINS;
-		for (int k = 0; k < in_bins[ctr].size(); ++k)
+		for (unsigned int k = 0; k < in_bins[ctr].size(); ++k)
 		{
 			//check triangles in this bin
 			if (SameTriangle(in_bins[ctr][k].m_v0, in_bins[ctr][k].m_v1, in_bins[ctr][k].m_v2, 
@@ -178,7 +178,7 @@ bool TestTriangle(const unsigned short v0, const unsigned short v1, const unsign
 		if (!isLegit)
 		{
 			ctr = v2 % NUMBINS;
-			for (int k = 0; k < in_bins[ctr].size(); ++k)
+			for (unsigned int k = 0; k < in_bins[ctr].size(); ++k)
 			{
 				//check triangles in this bin
 				if (SameTriangle(in_bins[ctr][k].m_v0, in_bins[ctr][k].m_v1, in_bins[ctr][k].m_v2, 
@@ -214,7 +214,7 @@ bool GenerateStrips(const unsigned short* in_indices, const unsigned int in_numI
 	tempIndices.resize(in_numIndices);
 	unsigned short maxIndex = 0;
 	unsigned short minIndex = 0xFFFF;
-	for(int i = 0; i < in_numIndices; i++)
+	for(unsigned int i = 0; i < in_numIndices; i++)
 	{
 		tempIndices[i] = in_indices[i];
 		if (in_indices[i] > maxIndex)
@@ -243,7 +243,7 @@ bool GenerateStrips(const unsigned short* in_indices, const unsigned int in_numI
 
 		//count the total number of indices
 		unsigned int numIndices = 0;
-		for(int i = 0; i < tempStrips.size(); i++)
+		for(unsigned int i = 0; i < tempStrips.size(); i++)
 		{
 			numIndices += tempStrips[i]->m_faces.size() * 3;
 		}
@@ -257,9 +257,9 @@ bool GenerateStrips(const unsigned short* in_indices, const unsigned int in_numI
 
 		//do strips
 		unsigned int indexCtr = 0;
-		for(i = 0; i < tempStrips.size(); i++)
+		for(unsigned int i = 0; i < tempStrips.size(); i++)
 		{
-			for(int j = 0; j < tempStrips[i]->m_faces.size(); j++)
+			for(unsigned int j = 0; j < tempStrips[i]->m_faces.size(); j++)
 			{
 				//degenerates are of no use with lists
 				if(!NvStripifier::IsDegenerate(tempStrips[i]->m_faces[j]))
@@ -277,7 +277,7 @@ bool GenerateStrips(const unsigned short* in_indices, const unsigned int in_numI
 		}
 
 		//do lists
-		for(i = 0; i < tempFaces.size(); i++)
+		for(unsigned int i = 0; i < tempFaces.size(); i++)
 		{			
 			primGroupArray[0].indices[indexCtr++] = tempFaces[i]->m_v0;
 			primGroupArray[0].indices[indexCtr++] = tempFaces[i]->m_v1;
@@ -301,14 +301,15 @@ bool GenerateStrips(const unsigned short* in_indices, const unsigned int in_numI
 		
 		//first, the strips
 		int startingLoc = 0;
-		for(int stripCtr = 0; stripCtr < numSeparateStrips; stripCtr++)
+		for(unsigned int stripCtr = 0; stripCtr < numSeparateStrips; stripCtr++)
 		{
 			int stripLength = 0;
 
 			if(!bStitchStrips)
 			{
 				//if we've got multiple strips, we need to figure out the correct length
-				for(int i = startingLoc; i < stripIndices.size(); i++)
+				unsigned int i;
+				for(i = startingLoc; i < stripIndices.size(); i++)
 				{
 					if(stripIndices[i] == -1)
 						break;
@@ -340,7 +341,7 @@ bool GenerateStrips(const unsigned short* in_indices, const unsigned int in_numI
 			primGroupArray[faceGroupLoc].indices    = new unsigned short[tempFaces.size() * 3];
 			primGroupArray[faceGroupLoc].numIndices = tempFaces.size() * 3;
 			int indexCtr = 0;
-			for(int i = 0; i < tempFaces.size(); i++)
+			for(unsigned int i = 0; i < tempFaces.size(); i++)
 			{
 				primGroupArray[faceGroupLoc].indices[indexCtr++] = tempFaces[i]->m_v0;
 				primGroupArray[faceGroupLoc].indices[indexCtr++] = tempFaces[i]->m_v1;
@@ -357,19 +358,19 @@ bool GenerateStrips(const unsigned short* in_indices, const unsigned int in_numI
 		std::vector<NvFaceInfo> in_bins[NUMBINS];
 		
 		//hash input indices on first index
-		for (int i = 0; i < in_numIndices; i += 3)
+		for (unsigned int i = 0; i < in_numIndices; i += 3)
 		{
 			NvFaceInfo faceInfo(in_indices[i], in_indices[i + 1], in_indices[i + 2]);
 			in_bins[in_indices[i] % NUMBINS].push_back(faceInfo);
 		}
 		
-		for (i = 0; i < *numGroups; ++i)
+		for (int i = 0; i < *numGroups; ++i)
 		{
 			switch ((*primGroups)[i].type)
 			{
 				case PT_LIST:
 				{
-					for (int j = 0; j < (*primGroups)[i].numIndices; j += 3)
+					for (unsigned int j = 0; j < (*primGroups)[i].numIndices; j += 3)
 					{
 						unsigned short v0 = (*primGroups)[i].indices[j];
 						unsigned short v1 = (*primGroups)[i].indices[j + 1];
@@ -392,7 +393,7 @@ bool GenerateStrips(const unsigned short* in_indices, const unsigned int in_numI
 				{
 					int brokenCtr = 0;
 					bool flip = false;
-					for (int j = 2; j < (*primGroups)[i].numIndices; ++j)
+					for (unsigned int j = 2; j < (*primGroups)[i].numIndices; ++j)
 					{
 						unsigned short v0 = (*primGroups)[i].indices[j - 2];
 						unsigned short v1 = (*primGroups)[i].indices[j - 1];
@@ -474,7 +475,7 @@ void RemapIndices(const PrimitiveGroup* in_primGroups, const unsigned short numG
 		(*remappedGroups)[i].numIndices = numIndices;
 		(*remappedGroups)[i].indices    = new unsigned short[numIndices];
 
-		for(int j = 0; j < numIndices; j++)
+		for(unsigned int j = 0; j < numIndices; j++)
 		{
 			int cachedIndex = indexCache[in_primGroups[i].indices[j]];
 			if(cachedIndex == -1) //we haven't seen this index before
diff --git src/NvTriStrip/NvTriStripObjects.cpp src/NvTriStrip/NvTriStripObjects.cpp
index cc559a1..ca53120 100644
--- src/NvTriStrip/NvTriStripObjects.cpp
+++ src/NvTriStrip/NvTriStripObjects.cpp
@@ -1,8 +1,10 @@
 
 #pragma warning( disable : 4786 )
 
+#include <stdio.h>
 #include <assert.h>
 #include <set>
+#include <algorithm>
 #include "NvTriStripObjects.h"
 #include "VertexCache.h"
 
@@ -72,7 +74,7 @@ NvFaceInfo * NvStripifier::FindOtherFace(NvEdgeInfoVec &edgeInfos, int v0, int v
 
 bool NvStripifier::AlreadyExists(NvFaceInfo* faceInfo, NvFaceInfoVec& faceInfos)
 {
-	for(int i = 0; i < faceInfos.size(); ++i)
+	for(unsigned int i = 0; i < faceInfos.size(); ++i)
 	{
 		if( (faceInfos[i]->m_v0 == faceInfo->m_v0) &&
 			(faceInfos[i]->m_v1 == faceInfo->m_v1) &&
@@ -105,7 +107,7 @@ void NvStripifier::BuildStripifyInfo(NvFaceInfoVec &faceInfos, NvEdgeInfoVec &ed
 	int index        = 0;
 	bool bFaceUpdated[3];
 
-	for (i = 0; i < numTriangles; i++)
+	for (int i = 0; i < numTriangles; i++)
 	{
 		bool bMightAlreadyExist = true;
 		bFaceUpdated[0] = false;
@@ -148,7 +150,7 @@ void NvStripifier::BuildStripifyInfo(NvFaceInfoVec &faceInfos, NvEdgeInfoVec &ed
 		{
 			if (edgeInfo01->m_face1 != NULL)
 			{
-				printf("BuildStripifyInfo: > 2 triangles on an edge... uncertain consequences\n");
+				fprintf(stderr, "BuildStripifyInfo: > 2 triangles on an edge... uncertain consequences\n");
 			}
 			else
 			{
@@ -179,7 +181,7 @@ void NvStripifier::BuildStripifyInfo(NvFaceInfoVec &faceInfos, NvEdgeInfoVec &ed
 		{
 			if (edgeInfo12->m_face1 != NULL)
 			{
-				printf("BuildStripifyInfo: > 2 triangles on an edge... uncertain consequences\n");
+				fprintf(stderr, "BuildStripifyInfo: > 2 triangles on an edge... uncertain consequences\n");
 			}
 			else
 			{
@@ -210,7 +212,7 @@ void NvStripifier::BuildStripifyInfo(NvFaceInfoVec &faceInfos, NvEdgeInfoVec &ed
 		{
 			if (edgeInfo20->m_face1 != NULL)
 			{
-				printf("BuildStripifyInfo: > 2 triangles on an edge... uncertain consequences\n");
+				fprintf(stderr, "BuildStripifyInfo: > 2 triangles on an edge... uncertain consequences\n");
 			}
 			else
 			{
@@ -255,7 +257,7 @@ int NvStripifier::FindStartPoint(NvFaceInfoVec &faceInfos, NvEdgeInfoVec &edgeIn
 	int bestCtr = -1;
 	int bestIndex = -1;
 
-	for(int i = 0; i < faceInfos.size(); i++)
+	for(unsigned int i = 0; i < faceInfos.size(); i++)
 	{
 		int ctr = 0;
 
@@ -446,22 +448,22 @@ inline int NvStripifier::GetNextIndex(const WordVec &indices, NvFaceInfo *face){
 
 	if (fv0 != v0 && fv0 != v1){
 		if ((fv1 != v0 && fv1 != v1) || (fv2 != v0 && fv2 != v1)){
-			printf("GetNextIndex: Triangle doesn't have all of its vertices\n");
-			printf("GetNextIndex: Duplicate triangle probably got us derailed\n");
+			fprintf(stderr, "GetNextIndex: Triangle doesn't have all of its vertices\n");
+			fprintf(stderr, "GetNextIndex: Duplicate triangle probably got us derailed\n");
 		}
 		return fv0;
 	}
 	if (fv1 != v0 && fv1 != v1){
 		if ((fv0 != v0 && fv0 != v1) || (fv2 != v0 && fv2 != v1)){
-			printf("GetNextIndex: Triangle doesn't have all of its vertices\n");
-			printf("GetNextIndex: Duplicate triangle probably got us derailed\n");
+			fprintf(stderr, "GetNextIndex: Triangle doesn't have all of its vertices\n");
+			fprintf(stderr, "GetNextIndex: Duplicate triangle probably got us derailed\n");
 		}
 		return fv1;
 	}
 	if (fv2 != v0 && fv2 != v1){
 		if ((fv0 != v0 && fv0 != v1) || (fv1 != v0 && fv1 != v1)){
-			printf("GetNextIndex: Triangle doesn't have all of its vertices\n");
-			printf("GetNextIndex: Duplicate triangle probably got us derailed\n");
+			fprintf(stderr, "GetNextIndex: Triangle doesn't have all of its vertices\n");
+			fprintf(stderr, "GetNextIndex: Duplicate triangle probably got us derailed\n");
 		}
 		return fv2;
 	}
@@ -514,7 +516,7 @@ bool NvStripInfo::Unique(NvFaceInfoVec& faceVec, NvFaceInfo* face)
 	bool bv0, bv1, bv2; //bools to indicate whether a vertex is in the faceVec or not
 	bv0 = bv1 = bv2 = false;
 
-	for(int i = 0; i < faceVec.size(); i++)
+	for(unsigned int i = 0; i < faceVec.size(); i++)
 	{
 		if(!bv0)
 		{
@@ -635,7 +637,7 @@ void NvStripInfo::Build(NvEdgeInfoVec &edgeInfos, NvFaceInfoVec &faceInfos)
 	// tempAllFaces is going to be forwardFaces + backwardFaces
 	// it's used for Unique()
 	NvFaceInfoVec tempAllFaces;
-	for(int i = 0; i < forwardFaces.size(); i++)
+	for(unsigned int i = 0; i < forwardFaces.size(); i++)
 		tempAllFaces.push_back(forwardFaces[i]);
 
 	//
@@ -720,7 +722,7 @@ void NvStripInfo::Combine(const NvFaceInfoVec &forward, const NvFaceInfoVec &bac
 
 	// add forward faces
 	numFaces = forward.size();
-	for (i = 0; i < numFaces; i++)
+	for (int i = 0; i < numFaces; i++)
 		m_faces.push_back(forward[i]);
 }
 
@@ -845,12 +847,12 @@ void NvStripifier::RemoveSmallStrips(NvStripInfoVec& allStrips, NvStripInfoVec&
 	allBigStrips.clear();  //make sure these are empty
 	NvFaceInfoVec tempFaceList;
 
-	for(int i = 0; i < allStrips.size(); i++)
+	for(unsigned int i = 0; i < allStrips.size(); i++)
 	{
 		if(allStrips[i]->m_faces.size() < minStripLength)
 		{
 			//strip is too small, add faces to faceList
-			for(int j = 0; j < allStrips[i]->m_faces.size(); j++)
+			for(unsigned int j = 0; j < allStrips[i]->m_faces.size(); j++)
 				tempFaceList.push_back(allStrips[i]->m_faces[j]);
 
 			//and free memory
@@ -878,7 +880,7 @@ void NvStripifier::RemoveSmallStrips(NvStripInfoVec& allStrips, NvStripInfoVec&
 			bestNumHits = -1;
 
 			//find best face to add next, given the current cache
-			for(int i = 0; i < tempFaceList.size(); i++)
+			for(unsigned int i = 0; i < tempFaceList.size(); i++)
 			{
 				if(bVisitedList[i])
 					continue;
@@ -1115,7 +1117,7 @@ void NvStripifier::Stripify(const WordVec &in_indices, const int in_cacheSize,
 	int numSamples = 10;
 
 	//the cache size, clamped to one
-	cacheSize = max(1, in_cacheSize - CACHE_INEFFICIENCY);
+	cacheSize = std::max(1, in_cacheSize - CACHE_INEFFICIENCY);
 
 	minStripLength = in_minStripLength;  //this is the strip size threshold below which we dump the strip into a list
 
@@ -1136,12 +1138,12 @@ void NvStripifier::Stripify(const WordVec &in_indices, const int in_cacheSize,
 	SplitUpStripsAndOptimize(allStrips, outStrips, allEdgeInfos, outFaceList);
 
 	//clean up
-	for(int i = 0; i < allStrips.size(); i++)
+	for(unsigned int i = 0; i < allStrips.size(); i++)
 	{
 		delete allStrips[i];
 	}
 
-	for (i = 0; i < allEdgeInfos.size(); i++)
+	for (unsigned int i = 0; i < allEdgeInfos.size(); i++)
 	{
 		NvEdgeInfo *info = allEdgeInfos[i];
 		while (info != NULL)
@@ -1193,13 +1195,13 @@ void NvStripifier::SplitUpStripsAndOptimize(NvStripInfoVec &allStrips, NvStripIn
 	NvStripInfoVec tempStrips;
 
 	//split up strips into threshold-sized pieces
-	for(int i = 0; i < allStrips.size(); i++)
+	for(unsigned int i = 0; i < allStrips.size(); i++)
 	{
 		NvStripInfo* currentStrip;
 		NvStripStartInfo startInfo(NULL, NULL, false);
 
 		int actualStripSize = 0;
-		for(int j = 0; j < allStrips[i]->m_faces.size(); ++j)
+		for(unsigned int j = 0; j < allStrips[i]->m_faces.size(); ++j)
 		{
 			if( !IsDegenerate(allStrips[i]->m_faces[j]) )
 				actualStripSize++;
@@ -1212,7 +1214,8 @@ void NvStripifier::SplitUpStripsAndOptimize(NvStripInfoVec &allStrips, NvStripIn
 			int numLeftover = actualStripSize /*allStrips[i]->m_faces.size()*/ % threshold;
 
 			int degenerateCount = 0;
-			for(int j = 0; j < numTimes; j++)
+			int j = 0;
+			for(j = 0; j < numTimes; j++)
 			{
 				currentStrip = new NvStripInfo(startInfo, 0, -1);
 
@@ -1315,7 +1318,7 @@ void NvStripifier::SplitUpStripsAndOptimize(NvStripInfoVec &allStrips, NvStripIn
 			// this way we can delete allBigStrips later to free the memory
 			currentStrip = new NvStripInfo(startInfo, 0, -1);
 
-			for(int j = 0; j < allStrips[i]->m_faces.size(); j++)
+			for(unsigned int j = 0; j < allStrips[i]->m_faces.size(); j++)
 				currentStrip->m_faces.push_back(allStrips[i]->m_faces[j]);
 
 			tempStrips.push_back(currentStrip);
@@ -1344,12 +1347,12 @@ void NvStripifier::SplitUpStripsAndOptimize(NvStripInfoVec &allStrips, NvStripIn
 		int firstIndex = 0;
 		float minCost = 10000.0f;
 
-		for(i = 0; i < tempStrips2.size(); i++)
+		for(unsigned int i = 0; i < tempStrips2.size(); i++)
 		{
 			int numNeighbors = 0;
 
 			//find strip with least number of neighbors per face
-			for(int j = 0; j < tempStrips2[i]->m_faces.size(); j++)
+			for(unsigned int j = 0; j < tempStrips2[i]->m_faces.size(); j++)
 			{
 				numNeighbors += NumNeighbors(tempStrips2[i]->m_faces[j], edgeInfos);
 			}
@@ -1376,7 +1379,7 @@ void NvStripifier::SplitUpStripsAndOptimize(NvStripInfoVec &allStrips, NvStripIn
 			bestNumHits = -1.0f;
 
 			//find best strip to add next, given the current cache
-			for(int i = 0; i < tempStrips2.size(); i++)
+			for(unsigned int i = 0; i < tempStrips2.size(); i++)
 			{
 				if(tempStrips2[i]->visited)
 					continue;
@@ -1451,7 +1454,7 @@ void NvStripifier::SplitUpStripsAndOptimize(NvStripInfoVec &allStrips, NvStripIn
 //
 void NvStripifier::UpdateCacheStrip(VertexCache* vcache, NvStripInfo* strip)
 {
-	for(int i = 0; i < strip->m_faces.size(); ++i)
+	for(unsigned int i = 0; i < strip->m_faces.size(); ++i)
 	{
 		if(!vcache->InCache(strip->m_faces[i]->m_v0))
 			vcache->AddEntry(strip->m_faces[i]->m_v0);
@@ -1492,7 +1495,7 @@ float NvStripifier::CalcNumHitsStrip(VertexCache* vcache, NvStripInfo* strip)
 	int numHits = 0;
 	int numFaces = 0;
 
-	for(int i = 0; i < strip->m_faces.size(); i++)
+	for(unsigned int i = 0; i < strip->m_faces.size(); i++)
 	{
 		if(vcache->InCache(strip->m_faces[i]->m_v0))
 			++numHits;
@@ -1667,7 +1670,7 @@ void NvStripifier::FindAllStrips(NvStripInfoVec &allStrips,
 		// far we get
 		//
 		int numExperiments = experimentIndex;
-		for (i = 0; i < numExperiments; i++){
+		for (int i = 0; i < numExperiments; i++){
 
 			// get the strip set
 
@@ -1695,7 +1698,7 @@ void NvStripifier::FindAllStrips(NvStripInfoVec &allStrips,
 		//
 		int bestIndex = 0;
 		double bestValue = 0;
-		for (i = 0; i < numExperiments; i++)
+		for (int i = 0; i < numExperiments; i++)
 		{
 			const float avgStripSizeWeight = 1.0f;
 			const float numTrisWeight      = 0.0f;
@@ -1719,7 +1722,7 @@ void NvStripifier::FindAllStrips(NvStripInfoVec &allStrips,
 		CommitStrips(allStrips, experiments[bestIndex]);
 
 		// and destroy all of the others
-		for (i = 0; i < numExperiments; i++)
+		for (int i = 0; i < numExperiments; i++)
 		{
 			if (i != bestIndex)
 			{
@@ -1728,7 +1731,7 @@ void NvStripifier::FindAllStrips(NvStripInfoVec &allStrips,
 				{
 					NvStripInfo* currStrip = experiments[i][j];
 					//delete all bogus faces in the experiments
-					for (int k = 0; k < currStrip->m_faces.size(); ++k)
+					for (unsigned int k = 0; k < currStrip->m_faces.size(); ++k)
 					{
 						if(currStrip->m_faces[k]->m_bIsFake)
 						{
diff --git src/NvTriStrip/NvTriStripObjects.h src/NvTriStrip/NvTriStripObjects.h
index 861b3b3..a8c11d5 100644
--- src/NvTriStrip/NvTriStripObjects.h
+++ src/NvTriStrip/NvTriStripObjects.h
@@ -3,11 +3,13 @@
 #define NV_TRISTRIP_OBJECTS_H
 
 #include <assert.h>
-#include <windows.h>
 #include <vector>
 #include <list>
 #include "VertexCache.h"
 
+typedef unsigned int UINT;
+typedef long WORD;
+
 /////////////////////////////////////////////////////////////////////////////////
 //
 // Types defined for stripification
@@ -193,7 +195,7 @@ protected:
 
 	WordVec indices;
 	int cacheSize;
-	int minStripLength;
+	unsigned int minStripLength;
 	float meshJump;
 	bool bFirstTimeResetPoint;
 
@@ -238,7 +240,7 @@ protected:
 
 	// let our strip info classes and the other classes get
 	// to these protected stripificaton methods if they want
-	friend NvStripInfo;
+	friend class NvStripInfo;
 };
 
 #endif
diff --git src/NvTriStrip/VertexCache.h src/NvTriStrip/VertexCache.h
index 3b06665..469e80b 100644
--- src/NvTriStrip/VertexCache.h
+++ src/NvTriStrip/VertexCache.h
@@ -3,6 +3,8 @@
 
 #define VERTEX_CACHE_H
 
+#include <string.h>
+
 class VertexCache
 {
 	
